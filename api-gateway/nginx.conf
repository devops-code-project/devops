events {}

http {
    lua_shared_dict discovery 1m;

    upstream backend_security {
        server host.docker.internal:9001;
    }

    upstream backend_ubication {
        server host.docker.internal:9002;
    }

    server {
        listen 9000;

        location /security/ {
            rewrite ^/security/(.*) /$1 break;
            proxy_pass http://backend_security;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /ubication/ {
            access_by_lua_block {
                local jwt = require("resty.jwt")
                local validators = require("resty.jwt-validators")

                ngx.log(ngx.ERR, "Starting JWT verification...")

                local jwt_token = ngx.var.http_Authorization
                if not jwt_token then
                    ngx.log(ngx.ERR, "Authorization header missing")
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end

                jwt_token = jwt_token:match("Bearer%s+(.+)")
                if not jwt_token then
                    ngx.log(ngx.ERR, "Invalid JWT token format")
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end

                local secret_file = "/etc/nginx/conf.d/jwt.secret"
                local file = io.open(secret_file, "r")
                local secret = file:read("*a")
                file:close()
                ngx.log(ngx.ERR, "Secret: ", secret)

                local jwt_obj = jwt:verify(secret, jwt_token, {alg = "HS384"})
                ngx.log(ngx.ERR, "JWT Verification result: ", require("cjson").encode(jwt_obj))

                if not jwt_obj.verified then
                    ngx.log(ngx.ERR, "JWT Verification failed: ", jwt_obj.reason)
                    ngx.status = ngx.HTTP_UNAUTHORIZED
                    ngx.say("JWT verification failed: ", jwt_obj.reason)
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end

                -- Cambio aqu√≠: pasando funciones en lugar de invocar funciones
                local claims_spec = {
                    exp = validators.is_not_expired,
                    iat = validators.is_not_before
                }

                local valid_claims, err = jwt_obj:validate_claims(claims_spec)
                ngx.log(ngx.ERR, "Claims validation result: ", valid_claims, " Error: ", err)

                if not valid_claims then
                    ngx.log(ngx.ERR, "JWT Claims validation failed: ", err)
                    ngx.status = ngx.HTTP_UNAUTHORIZED
                    ngx.say("JWT claims validation failed: ", err)
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end

                ngx.log(ngx.ERR, "JWT verification completed successfully")
            }

            rewrite ^/ubication/(.*) /$1 break;
            proxy_pass http://backend_ubication;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS, PUT, DELETE';
        add_header Access-Control-Allow-Headers 'Origin, Content-Type, Accept, Authorization';
    }
}