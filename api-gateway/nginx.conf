events {}

http {
    lua_shared_dict discovery 1m;

    upstream backend_security {
        server host.docker.internal:9001;
    }

    upstream backend_ubication {
        server host.docker.internal:9002;
    }

    server {
        listen 9000;

        location /security/ {
            rewrite ^/security/(.*) /$1 break;
            proxy_pass http://backend_security;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /ubication/ {
            access_by_lua_block {
                local jwt = require("resty.jwt")
                local validators = require "resty.jwt-validators"

                local jwt_token = ngx.var.http_Authorization
                ngx.log(ngx.ERR, "Authorization Header: ", jwt_token)
                if jwt_token and jwt_token:find("Bearer ") == 1 then
                    jwt_token = jwt_token:sub(8)
                else
                    ngx.log(ngx.ERR, "JWT Token not found or invalid format")
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end

                local secret = "roITo2yN5V8W6RbcVJ0GvjKjFbfNgs2DRirmwdpbBTQ48mSudfltuMGxmUCIjYZOIUeBSZqMUcdNRXhYgY8w=="
                local jwt_obj = jwt:verify(secret, jwt_token, {alg = "HS384"})

                ngx.log(ngx.ERR, "JWT Verification result: ", require("cjson").encode(jwt_obj))

                if not jwt_obj.verified then
                    ngx.log(ngx.ERR, "JWT Verification failed: ", jwt_obj.reason)
                    ngx.status = ngx.HTTP_UNAUTHORIZED
                    ngx.say(jwt_obj.reason)
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end

                -- Validar claims espec√≠ficos
                local claims_spec = {
                    exp = validators.is_not_expired(),
                    iat = validators.is_not_before()
                }
                local valid_claims, err = jwt_obj:validate_claims(claims_spec)
                if not valid_claims then
                    ngx.log(ngx.ERR, "JWT Claims validation failed: ", err)
                    ngx.status = ngx.HTTP_UNAUTHORIZED
                    ngx.say(err)
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end
            }

            rewrite ^/ubication/(.*) /$1 break;
            proxy_pass http://backend_ubication;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Swagger UI
        location /swagger-ui.html {
            proxy_pass http://backend_ubication/swagger-ui.html;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /swagger-ui/ {
            proxy_pass http://backend_ubication/swagger-ui/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /v3/api-docs {
            proxy_pass http://backend_ubication/v3/api-docs;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /swagger-resources/ {
            proxy_pass http://backend_ubication/swagger-resources/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /webjars/ {
            proxy_pass http://backend_ubication/webjars/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # CORS headers
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS, PUT, DELETE';
        add_header Access-Control-Allow-Headers 'Origin, Content-Type, Accept, Authorization';
    }
}